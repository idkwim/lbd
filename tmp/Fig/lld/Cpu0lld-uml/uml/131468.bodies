class ELFLinkingContext
!!!149900.cpp!!!	isLittleEndian() : bool
  // TODO: Do this properly. It is not defined purely by arch.
  return true;
!!!150412.cpp!!!	getOutputMachine() : uint16_t
  switch (getTriple().getArch()) {
  case llvm::Triple::x86:
    return llvm::ELF::EM_386;
  case llvm::Triple::x86_64:
    return llvm::ELF::EM_X86_64;
  case llvm::Triple::hexagon:
    return llvm::ELF::EM_HEXAGON;
  case llvm::Triple::ppc:
    return llvm::ELF::EM_PPC;
  case llvm::Triple::cpu0:
    return llvm::ELF::EM_CPU0;
  default:
    llvm_unreachable("Unhandled arch");
  }
!!!151052.cpp!!!	validateImpl(inout diagnostics : raw_ostream) : bool
  _elfReader = createReaderELF(*this);
  _linkerScriptReader.reset(new ReaderLinkerScript(*this));
  switch (outputFileType()) {
  case LinkingContext::OutputFileType::YAML:
    _writer = createWriterYAML(*this);
    break;
  case LinkingContext::OutputFileType::Native:
    llvm_unreachable("Unimplemented");
    break;
  default:
    _writer = createWriterELF(*this);
    break;
  }
  return true;
!!!151436.cpp!!!	create(in triple : llvm::Triple) : std::unique_ptr<ELFLinkingContext>
  switch (triple.getArch()) {
  case llvm::Triple::x86:
    return std::unique_ptr<ELFLinkingContext>(
        new lld::elf::X86LinkingContext(triple));
  case llvm::Triple::x86_64:
    return std::unique_ptr<ELFLinkingContext>(
        new lld::elf::X86_64LinkingContext(triple));
  case llvm::Triple::hexagon:
    return std::unique_ptr<ELFLinkingContext>(
        new lld::elf::HexagonLinkingContext(triple));
  case llvm::Triple::ppc:
    return std::unique_ptr<ELFLinkingContext>(
        new lld::elf::PPCLinkingContext(triple));
  case llvm::Triple::cpu0:
    return std::unique_ptr<ELFLinkingContext>(
        new lld::elf::Cpu0LinkingContext(triple));
  default:
    return nullptr;
  }
!!!151948.cpp!!!	isDynamic() : bool
  switch (_outputELFType) {
  case llvm::ELF::ET_EXEC:
    return !_isStaticExecutable;
  case llvm::ELF::ET_DYN:
    return true;
  }
  return false;
!!!152076.cpp!!!	isRelativeReloc(in r : Reference) : bool
  return false;
!!!153612.cpp!!!	searchLibrary(in libName : StringRef, in searchPath : std::vector<StringRef>) : llvm::ErrorOr<StringRef>
  bool foundFile = false;
  StringRef pathref;
  SmallString<128> path;
  for (StringRef dir : searchPath) {
    // Search for dynamic library
    if (!_isStaticExecutable) {
      path.clear();
      if (dir.startswith("=/")) {
        path.assign(_sysrootPath);
        path.append(dir.substr(1));
      } else {
        path.assign(dir);
      }
      llvm::sys::path::append(path, Twine("lib") + libName + ".so");
      pathref = path.str();
      if (llvm::sys::fs::exists(pathref)) {
        foundFile = true;
      }
    }
    // Search for static libraries too
    if (!foundFile) {
      path.clear();
      if (dir.startswith("=/")) {
        path.assign(_sysrootPath);
        path.append(dir.substr(1));
      } else {
        path.assign(dir);
      }
      llvm::sys::path::append(path, Twine("lib") + libName + ".a");
      pathref = path.str();
      if (llvm::sys::fs::exists(pathref)) {
        foundFile = true;
      }
    }
    if (foundFile)
      return StringRef(*new (_allocator) std::string(pathref));
  }
  if (!llvm::sys::fs::exists(libName))
    return llvm::make_error_code(llvm::errc::no_such_file_or_directory);

  return libName;
!!!153740.cpp!!!	entrySymbolName() : StringRef
  if (_outputELFType == elf::ET_EXEC && _entrySymbolName.empty())
    return "_start";
  return _entrySymbolName;
!!!155532.cpp!!!	writer() : Writer
 return *_writer;
