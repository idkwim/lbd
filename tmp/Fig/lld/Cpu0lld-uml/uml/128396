format 74
"Cpu0" // Cpu0::Cpu0
  revision 5
  modified_by 12 "Gamma"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "/home/Gamma/test/lbd/docs/BackendTutorial/source_ExampleCode/working/Cpu0lld-uml/Cpu0lld-src/ELF/Cpu0/"
  cpp_src_dir "/home/Gamma/test/lbd/docs/BackendTutorial/source_ExampleCode/working/Cpu0lld-uml/Cpu0lld-src/ELF/Cpu0/"
  classview 128396 "Cpu0"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 131212 "anonymous1"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ \\brief cpu0 internal references."
      attribute 131596 "LLD_R_CPU0_GOTRELINDEX"
	public type class_ref 131212 // anonymous1
	init_value " 1024"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 138636 "Cpu0InitAtom"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Cpu0_64InitFini Atom"
      classrelation 134796 // <generalisation>
	relation 134796 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 134796 // <generalisation>
	  b parent class_ref 138764 // InitFiniAtom
      end

      operation 169100 "Cpu0InitAtom"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "f" type class_ref 129420 // File
	  param in name "function" explicit_type "StringRef"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw} : InitFiniAtom(f, \".init_array\") {
#ifndef NDEBUG
    _name = \"__init_fn_\";
    _name += function;
#endif
  };
"
	
	
	
	
      end

      operation 169228 "rawContent"
	const cpp_virtual cpp_inline public explicit_return_type "ArrayRef<uint8_t>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return ArrayRef<uint8_t>(cpu0InitFiniAtomContent, 8);
  };
"
	
	
	
	
      end

      operation 169356 "alignment"
	const cpp_virtual cpp_inline public explicit_return_type "Alignment"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return Alignment(3); };
"
	
	
	
	
      end
    end

    class 138892 "Cpu0FiniAtom"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 134924 // <generalisation>
	relation 134924 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 134924 // <generalisation>
	  b parent class_ref 138764 // InitFiniAtom
      end

      operation 169484 "Cpu0FiniAtom"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "f" type class_ref 129420 // File
	  param in name "function" explicit_type "StringRef"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw} : InitFiniAtom(f, \".fini_array\") {
#ifndef NDEBUG
    _name = \"__fini_fn_\";
    _name += function;
#endif
  };
"
	
	
	
	
      end

      operation 169612 "rawContent"
	const cpp_virtual cpp_inline public explicit_return_type "ArrayRef<uint8_t>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return ArrayRef<uint8_t>(cpu0InitFiniAtomContent, 8);
  };
"
	
	
	
	
      end

      operation 169740 "alignment"
	const cpp_virtual cpp_inline public explicit_return_type "Alignment"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return Alignment(3); };
"
	
	
	
	
      end
    end

    class 139020 "Cpu0InitFiniFile"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 135052 // <generalisation>
	relation 135052 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 135052 // <generalisation>
	  b parent class_ref 132492 // SimpleFile
      end

      operation 169868 "Cpu0InitFiniFile"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "context" type class_ref 131468 // ELFLinkingContext
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : SimpleFile(context, \"command line option -init/-fini\"), _ordinal(0) {};
"
	
	
	
	
      end

      operation 169996 "addInitFunction"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "StringRef"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    Atom *initFunctionAtom = new (_allocator) SimpleUndefinedAtom(*this, name);
    Cpu0InitAtom *initAtom =
           (new (_allocator) Cpu0InitAtom(*this, name));
    initAtom->addReference(llvm::ELF::R_CPU0_32, 0, initFunctionAtom, 0);
    initAtom->setOrdinal(_ordinal++);
    addAtom(*initFunctionAtom);
    addAtom(*initAtom);
  };
"
	
	
	
	
      end

      operation 170124 "addFiniFunction"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "StringRef"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    Atom *finiFunctionAtom = new (_allocator) SimpleUndefinedAtom(*this, name);
    Cpu0FiniAtom *finiAtom =
           (new (_allocator) Cpu0FiniAtom(*this, name));
    finiAtom->addReference(llvm::ELF::R_CPU0_32, 0, finiFunctionAtom, 0);
    finiAtom->setOrdinal(_ordinal++);
    addAtom(*finiFunctionAtom);
    addAtom(*finiAtom);
  };
"
	
	
	
	
      end

      attribute 143372 "_allocator"
	private explicit_type "llvm::BumpPtrAllocator"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 143500 "_ordinal"
	private explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 139148 "Cpu0SoPlt"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 143628 "funAddr"
	private explicit_type "uint32_t"
	multiplicity "[100]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 143756 "funAddrSize"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 170252 "createFunAddr"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "context" explicit_type "Cpu0LinkingContext"
	  param inout name "buf" explicit_type "llvm::FileOutputBuffer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 170380 "getDynFunIndexByTargetAddr"
	preserve_cpp_body_indent public explicit_return_type "int"
	nparams 1
	  param in name "fAddr" explicit_type "uint64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Return function index, 1: 1st function appear on section .text of .so.
   2: 2nd function ...
 For example: 3 functions _Z2laii, _Z3fooii and _Z3barv. 1: is _Z2laii 
   2 is _Z3fooii, 3: is _Z3barv."
      end
    end

    class 139276 "Cpu0BootAtom"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ boot record"
      classrelation 135180 // <generalisation>
	relation 135180 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 135180 // <generalisation>
	  b parent class_ref 139404 // PLT0Atom
      end

      operation 170508 "Cpu0BootAtom"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "f" type class_ref 129420 // File
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : PLT0Atom(f) {
#ifndef NDEBUG
    _name = \".PLT0\";
#endif
  };
"
	
	
	
	
      end

      operation 170636 "rawContent"
	const cpp_virtual cpp_inline public explicit_return_type "ArrayRef<uint8_t>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return ArrayRef<uint8_t>(cpu0BootAtomContent, 16);
  };
"
	
	
	
	
      end
    end

    class 139532 "Cpu0GOTAtom"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ \\brief Atoms that are used by Cpu0 dynamic linking"
      classrelation 135308 // <generalisation>
	relation 135308 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 135308 // <generalisation>
	  b parent class_ref 139660 // GOTAtom
      end

      operation 170764 "Cpu0GOTAtom"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "f" type class_ref 129420 // File
	  param in name "secName" explicit_type "StringRef"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw} : GOTAtom(f, secName) {};
"
	
	
	
	
      end

      operation 170892 "rawContent"
	const cpp_virtual cpp_inline public explicit_return_type "ArrayRef<uint8_t>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return ArrayRef<uint8_t>(cpu0GotAtomContent, 16);
  };
"
	
	
	
	
      end
    end

    class 139788 "Cpu0PLT0Atom"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 135436 // <generalisation>
	relation 135436 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 135436 // <generalisation>
	  b parent class_ref 139404 // PLT0Atom
      end

      operation 171020 "Cpu0PLT0Atom"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "f" type class_ref 129420 // File
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : PLT0Atom(f) {
#ifndef NDEBUG
    _name = \".PLT0\";
#endif
  };
"
	
	
	
	
      end

      operation 171148 "rawContent"
	const cpp_virtual cpp_inline public explicit_return_type "ArrayRef<uint8_t>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return ArrayRef<uint8_t>(cpu0Plt0AtomContent, 16);
  };
"
	
	
	
	
      end
    end

    class 139916 "Cpu0PLTAtom"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 135564 // <generalisation>
	relation 135564 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 135564 // <generalisation>
	  b parent class_ref 140044 // PLTAtom
      end

      operation 171276 "Cpu0PLTAtom"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "f" type class_ref 129420 // File
	  param in name "secName" explicit_type "StringRef"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw} : PLTAtom(f, secName) {};
"
	
	
	
	
      end

      operation 171404 "rawContent"
	const cpp_virtual cpp_inline public explicit_return_type "ArrayRef<uint8_t>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return ArrayRef<uint8_t>(cpu0PltAtomContent, 16);
  };
"
	
	
	
	
      end
    end

    class 140172 "ELFPassFile"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 135692 // <generalisation>
	relation 135692 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 135692 // <generalisation>
	  b parent class_ref 132492 // SimpleFile
      end

      operation 171532 "ELFPassFile"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "eti" type class_ref 131468 // ELFLinkingContext
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : SimpleFile(eti, \"ELFPassFile\") {
    setOrdinal(eti.getNextOrdinalAndIncrement());
  };
"
	
	
	
	
      end

      attribute 143884 "_alloc"
	public explicit_type "llvm::BumpPtrAllocator"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 140300 "RelocationPass"
      visibility package 
      nformals 1
      formal name "Derived" type "class" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ \\brief CRTP base for handling relocations."
      classrelation 135820 // <generalisation>
	relation 135820 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 135820 // <generalisation>
	  b parent class_ref 140428 // typedef11
      end

      operation 171660 "handleReference"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param in name "atom" explicit_type "DefinedAtom"
	  param in name "ref" explicit_type "Reference"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    switch (ref.kind()) {
    case R_CPU0_CALL16:
      static_cast<Derived *>(this)->handlePLT32(ref);
      break;

    case R_CPU0_PC24:
      static_cast<Derived *>(this)->handlePlain(ref);
      break;
    }
  };
"
	
	
	
	
	comment "/ \\brief Handle a specific reference."
      end

      operation 171788 "getIFUNCPLTEntry"
	cpp_inline protected return_type class_ref 140044 // PLTAtom
	nparams 1
	  param in name "da" explicit_type "DefinedAtom"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    auto plt = _pltMap.find(da);
    if (plt != _pltMap.end())
      return plt->second;
    auto ga = new (_file._alloc) Cpu0GOTAtom(_file, \".got.plt\");
    ga->addReference(R_CPU0_RELGOT, 0, da, 0);
    auto pa = new (_file._alloc) Cpu0PLTAtom(_file, \".plt\");
    pa->addReference(R_CPU0_PC24, 2, ga, -4);
#ifndef NDEBUG
    ga->_name = \"__got_ifunc_\";
    ga->_name += da->name();
    pa->_name = \"__plt_ifunc_\";
    pa->_name += da->name();
#endif
    _gotMap[da] = ga;
    _pltMap[da] = pa;
    _gotVector.push_back(ga);
    _pltVector.push_back(pa);
    return pa;
  };
"
	
	
	
	
	comment "/ \\brief get the PLT entry for a given IFUNC Atom.
/
/ If the entry does not exist. Both the GOT and PLT entry is created."
      end

      operation 171916 "handleIFUNC"
	cpp_inline protected explicit_return_type "ErrorOr<void>"
	nparams 1
	  param in name "ref" explicit_type "Reference"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    auto target = dyn_cast_or_null<const DefinedAtom>(ref.target());
#ifdef DLINKER
    if (target && target->contentType() == DefinedAtom::typeResolver)
      const_cast<Reference &>(ref).setTarget(getIFUNCPLTEntry(target));
#endif // DLINKER
    return error_code::success();
  };
"
	
	
	
	
	comment "/ \\brief Redirect the call to the PLT stub for the target IFUNC.
/
/ This create a PLT and GOT entry for the IFUNC if one does not exist. The
/ GOT entry and a IRELATIVE relocation to the original target resolver."
      end

      operation 172044 "getGOTTPOFF"
	cpp_inline protected return_type class_ref 139660 // GOTAtom
	nparams 1
	  param in name "atom" explicit_type "Atom"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    auto got = _gotMap.find(atom);
    if (got == _gotMap.end()) {
      auto g = new (_file._alloc) Cpu0GOTAtom(_file, \".got\");
      g->addReference(R_CPU0_TLS_TPREL32, 0, atom, 0);
#ifndef NDEBUG
      g->_name = \"__got_tls_\";
      g->_name += atom->name();
#endif
      _gotMap[atom] = g;
      _gotVector.push_back(g);
      return g;
    }
    return got->second;
  };
"
	
	
	
	
	comment "/ \\brief Create a GOT entry for the TP offset of a TLS atom."
      end

      operation 172172 "getNullGOT"
	cpp_inline protected return_type class_ref 139660 // GOTAtom
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    if (!_null) {
      _null = new (_file._alloc) Cpu0GOTAtom(_file, \".got.plt\");
#ifndef NDEBUG
      _null->_name = \"__got_null\";
#endif
    }
    return _null;
  };
"
	
	
	
	
	comment "/ \\brief Create a GOT entry containing 0."
      end

      operation 172300 "getGOT"
	cpp_inline protected return_type class_ref 139660 // GOTAtom
	nparams 1
	  param in name "da" explicit_type "DefinedAtom"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    auto got = _gotMap.find(da);
    if (got == _gotMap.end()) {
      auto g = new (_file._alloc) Cpu0GOTAtom(_file, \".got\");
      g->addReference(R_CPU0_32, 0, da, 0);
#ifndef NDEBUG
      g->_name = \"__got_\";
      g->_name += da->name();
#endif
      _gotMap[da] = g;
      _gotVector.push_back(g);
      return g;
    }
    return got->second;
  };
"
	
	
	
	
      end

      operation 172428 "RelocationPass"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "ctx" type class_ref 131468 // ELFLinkingContext
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : _file(ctx), _ctx(ctx), _null(nullptr), _PLT0(nullptr), _got0(nullptr), 
        _boot(new Cpu0BootAtom(_file)) {};
"
	
	
	
	
      end

      operation 172556 "perform"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "mf" explicit_type "std::unique_ptr<MutableFile>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    ScopedTask task(getDefaultDomain(), \"Cpu0 GOT/PLT Pass\");
    // Process all references.
    for (const auto &atom : mf->defined())
      for (const auto &ref : *atom)
        handleReference(*atom, *ref);

    // Add all created atoms to the link.
    uint64_t ordinal = 0;
    if (_ctx.getOutputELFType() == llvm::ELF::ET_EXEC) {
      MutableFile::DefinedAtomRange atomRange = mf->definedAtoms();
      auto it = atomRange.begin();
      bool find = false;
      for (it = atomRange.begin(); it < atomRange.end(); it++) {
        if ((*it)->name() == \"_Z5startv\") {
          find = true;
          break;
        }
      }
      assert(find && \"not found _Z5startv\\n\");
      _boot->addReference(R_CPU0_PC24, 0, *it, -3);
      _boot->setOrdinal(ordinal++);
      mf->addAtom(*_boot);
    }
#ifdef DLINKER
    if (_PLT0) {
      MutableFile::DefinedAtomRange atomRange = mf->definedAtoms();
      auto it = atomRange.begin();
      bool find = false;
      for (it = atomRange.begin(); it < atomRange.end(); it++) {
        if ((*it)->name() == \"_Z14dynamic_linkerv\") {
          find = true;
          break;
        }
      }
      assert(find && \"Cannot find _Z14dynamic_linkerv()\");
      _PLT0->addReference(R_CPU0_PC24, 12, *it, -3);
      _PLT0->setOrdinal(ordinal++);
      mf->addAtom(*_PLT0);
    }
    for (auto &plt : _pltVector) {
      plt->setOrdinal(ordinal++);
      mf->addAtom(*plt);
    }
    if (_null) {
      _null->setOrdinal(ordinal++);
      mf->addAtom(*_null);
    }
    if (_PLT0) {
      _got0->setOrdinal(ordinal++);
      mf->addAtom(*_got0);
    }
    for (auto &got : _gotVector) {
      got->setOrdinal(ordinal++);
      mf->addAtom(*got);
    }
#endif // DLINKER
  };
"
	
	
	
	
	comment "/ \\brief Do the pass.
/
/ The goal here is to first process each reference individually. Each call
/ to handleReference may modify the reference itself and/or create new
/ atoms which must be stored in one of the maps below.
/
/ After all references are handled, the atoms created during that are all
/ added to mf."
      end

      classrelation 135948 // _file (<directional composition>)
	relation 135948 *-->
	  a role_name "_file" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 135948 // _file (<directional composition>)
	  b parent class_ref 140172 // ELFPassFile
      end

      classrelation 136076 // _ctx (<unidirectional association>)
	relation 136076 --->
	  a role_name "_ctx" const_relation protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	    classrelation_ref 136076 // _ctx (<unidirectional association>)
	  b parent class_ref 131468 // ELFLinkingContext
      end

      classrelation 136204 // _gotMap (<unidirectional association>)
	relation 136204 --->
	  stereotype "llvm::DenseMap"
	  a role_name "_gotMap" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<const Atom*,${type}*> ${name}${value};
"
	    classrelation_ref 136204 // _gotMap (<unidirectional association>)
	  b parent class_ref 139660 // GOTAtom
      end

      classrelation 136332 // _pltMap (<unidirectional association>)
	relation 136332 --->
	  stereotype "llvm::DenseMap"
	  a role_name "_pltMap" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<const Atom*,${type}*> ${name}${value};
"
	    classrelation_ref 136332 // _pltMap (<unidirectional association>)
	  b parent class_ref 140044 // PLTAtom
      end

      classrelation 136460 // _gotVector (<unidirectional association>)
	relation 136460 --->
	  stereotype "std::vector"
	  a role_name "_gotVector" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}*> ${name}${value};
"
	    classrelation_ref 136460 // _gotVector (<unidirectional association>)
	  b parent class_ref 139660 // GOTAtom
      end

      classrelation 136588 // _pltVector (<unidirectional association>)
	relation 136588 --->
	  stereotype "std::vector"
	  a role_name "_pltVector" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}*> ${name}${value};
"
	    classrelation_ref 136588 // _pltVector (<unidirectional association>)
	  b parent class_ref 140044 // PLTAtom
      end

      classrelation 136716 // _boot (<unidirectional association>)
	relation 136716 --->
	  a role_name "_boot" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 136716 // _boot (<unidirectional association>)
	  b parent class_ref 139404 // PLT0Atom
      end

      classrelation 136844 // _null (<unidirectional association>)
	relation 136844 --->
	  a role_name "_null" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 136844 // _null (<unidirectional association>)
	  b parent class_ref 139660 // GOTAtom
      end

      classrelation 136972 // _PLT0 (<unidirectional association>)
	relation 136972 --->
	  a role_name "_PLT0" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 136972 // _PLT0 (<unidirectional association>)
	  b parent class_ref 139404 // PLT0Atom
      end

      classrelation 137100 // _got0 (<unidirectional association>)
	relation 137100 --->
	  a role_name "_got0" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 137100 // _got0 (<unidirectional association>)
	  b parent class_ref 139660 // GOTAtom
      end

      classrelation 144012 // <unidirectional association>
	relation 144012 --->
	  a role_name "" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 144012 // <unidirectional association>
	  b parent class_ref 139276 // Cpu0BootAtom
      end

      classrelation 144140 // <unidirectional association>
	relation 144140 --->
	  a role_name "" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 144140 // <unidirectional association>
	  b parent class_ref 139532 // Cpu0GOTAtom
      end

      classrelation 144268 // <unidirectional association>
	relation 144268 --->
	  a role_name "" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 144268 // <unidirectional association>
	  b parent class_ref 139788 // Cpu0PLT0Atom
      end

      classrelation 150796 // <unidirectional association>
	relation 150796 --->
	  a role_name "" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 150796 // <unidirectional association>
	  b parent class_ref 139916 // Cpu0PLTAtom
      end
    end

    class 140428 "typedef11"
      visibility package stereotype "typedef" explicit_base_type "Pass"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 140556 "StaticRelocationPass"
      visibility package 
      nactuals 1
      actual class class_ref 140300 // RelocationPass
        rank 0 value class_ref 140556 // StaticRelocationPass
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ @}
/ This implements the static relocation model. Meaning GOT and PLT entries are
/ not created for references that can be directly resolved. These are
/ converted to a direct relocation. For entries that do require a GOT or PLT
/ entry, that entry is statically bound.
/
/ TLS always assumes module 1 and attempts to remove indirection."
      classrelation 137228 // <realization>
	relation 137228 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 137228 // <realization>
	  b parent class_ref 140300 // RelocationPass
      end

      operation 172684 "StaticRelocationPass"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "ctx" type class_ref 131340 // Cpu0LinkingContext
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : RelocationPass(ctx) {};
"
	
	
	
	
      end

      operation 172812 "handlePlain"
	cpp_inline public explicit_return_type "ErrorOr<void>"
	nparams 1
	  param in name "ref" explicit_type "Reference"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return handleIFUNC(ref); };
"
	
	
	
	
      end

      operation 172940 "handlePLT32"
	cpp_inline public explicit_return_type "ErrorOr<void>"
	nparams 1
	  param in name "ref" explicit_type "Reference"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    // __tls_get_addr is handled elsewhere.
    if (ref.target() && ref.target()->name() == \"__tls_get_addr\") {
      const_cast<Reference &>(ref).setKind(R_CPU0_NONE);
      return error_code::success();
    } else
      // Static code doesn't need PLTs.
      const_cast<Reference &>(ref).setKind(R_CPU0_PC24);
    // Handle IFUNC.
    if (const DefinedAtom *da =
            dyn_cast_or_null<const DefinedAtom>(ref.target()))
      if (da->contentType() == DefinedAtom::typeResolver)
        return handleIFUNC(ref);
    return error_code::success();
  };
"
	
	
	
	
      end

      operation 173068 "handleGOT"
	cpp_inline public explicit_return_type "ErrorOr<void>"
	nparams 1
	  param in name "ref" explicit_type "Reference"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    if (isa<UndefinedAtom>(ref.target()))
      const_cast<Reference &>(ref).setTarget(getNullGOT());
    else if (const DefinedAtom *da = dyn_cast<const DefinedAtom>(ref.target()))
      const_cast<Reference &>(ref).setTarget(getGOT(da));
    return error_code::success();
  };
"
	
	
	
	
      end
    end

    class 140684 "DynamicRelocationPass"
      visibility package 
      nactuals 1
      actual class class_ref 140300 // RelocationPass
        rank 0 value class_ref 140684 // DynamicRelocationPass
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 137356 // <realization>
	relation 137356 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 137356 // <realization>
	  b parent class_ref 140300 // RelocationPass
      end

      operation 173196 "DynamicRelocationPass"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "ctx" type class_ref 131340 // Cpu0LinkingContext
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : RelocationPass(ctx) {};
"
	
	
	
	
      end

      operation 173324 "getPLT0"
	cpp_inline public return_type class_ref 139404 // PLT0Atom
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    if (_PLT0)
      return _PLT0;
    // Fill in the null entry.
    getNullGOT();
    _PLT0 = new (_file._alloc) Cpu0PLT0Atom(_file);
    _got0 = new (_file._alloc) Cpu0GOTAtom(_file, \".got.plt\");
#ifndef NDEBUG
    _got0->_name = \"__got0\";
#endif
    return _PLT0;
  };
"
	
	
	
	
      end

      operation 173452 "getPLTEntry"
	cpp_inline public return_type class_ref 140044 // PLTAtom
	nparams 1
	  param in name "a" explicit_type "Atom"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    auto plt = _pltMap.find(a);
    if (plt != _pltMap.end())
      return plt->second;
    auto ga = new (_file._alloc) Cpu0GOTAtom(_file, \".got.plt\");
    ga->addReference(R_CPU0_JUMP_SLOT, 0, a, 0);
    auto pa = new (_file._alloc) Cpu0PLTAtom(_file, \".plt\");
    getPLT0();  // add _PLT0 and _got0
    // Set the starting address of the got entry to the second instruction in
    // the plt entry.
    ga->addReference(R_CPU0_32, 0, pa, 4);
#ifndef NDEBUG
    ga->_name = \"__got_\";
    ga->_name += a->name();
    pa->_name = \"__plt_\";
    pa->_name += a->name();
#endif
    _gotMap[a] = ga;
    _pltMap[a] = pa;
    _gotVector.push_back(ga);
    _pltVector.push_back(pa);
    return pa;
  };
"
	
	
	
	
      end

      operation 173580 "handlePlain"
	cpp_inline public explicit_return_type "ErrorOr<void>"
	nparams 1
	  param in name "ref" explicit_type "Reference"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    if (!ref.target())
      return error_code::success();
    if (auto sla = dyn_cast<SharedLibraryAtom>(ref.target())) {
      if (sla->type() == SharedLibraryAtom::Type::Code) {
        const_cast<Reference &>(ref).setTarget(getPLTEntry(sla));
        // When caller of execution file call shared library function
        // Turn this into a PC24 to the PLT entry.
        const_cast<Reference &>(ref).setKind(R_CPU0_PC24);
      }
    } else
      return handleIFUNC(ref);
    return error_code::success();
  };
"
	
	
	
	
      end

      operation 173708 "handlePLT32"
	cpp_inline public explicit_return_type "ErrorOr<void>"
	nparams 1
	  param in name "ref" explicit_type "Reference"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    // Handle IFUNC.
    if (const DefinedAtom *da =
            dyn_cast_or_null<const DefinedAtom>(ref.target()))
      if (da->contentType() == DefinedAtom::typeResolver)
        return handleIFUNC(ref);
    if (isa<const SharedLibraryAtom>(ref.target())) {
      const_cast<Reference &>(ref).setTarget(getPLTEntry(ref.target()));
      // Turn this into a PC24 to the PLT entry.
    #if 1
      const_cast<Reference &>(ref).setKind(R_CPU0_PC24);
    #endif
    }
    return error_code::success();
  };
"
	
	
	
	
      end

      operation 173836 "getSharedGOT"
	cpp_inline public return_type class_ref 139660 // GOTAtom
	nparams 1
	  param in name "sla" explicit_type "SharedLibraryAtom"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    auto got = _gotMap.find(sla);
    if (got == _gotMap.end()) {
      auto g = new (_file._alloc) Cpu0GOTAtom(_file, \".got.dyn\");
      g->addReference(R_CPU0_GLOB_DAT, 0, sla, 0);
#ifndef NDEBUG
      g->_name = \"__got_\";
      g->_name += sla->name();
#endif
      _gotMap[sla] = g;
      _gotVector.push_back(g);
      return g;
    }
    return got->second;
  };
"
	
	
	
	
      end

      operation 173964 "handleGOT"
	cpp_inline public explicit_return_type "ErrorOr<void>"
	nparams 1
	  param in name "ref" explicit_type "Reference"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    if (isa<UndefinedAtom>(ref.target()))
      const_cast<Reference &>(ref).setTarget(getNullGOT());
    else if (const DefinedAtom *da = dyn_cast<const DefinedAtom>(ref.target()))
      const_cast<Reference &>(ref).setTarget(getGOT(da));
    else if (const auto sla = dyn_cast<const SharedLibraryAtom>(ref.target()))
      const_cast<Reference &>(ref).setTarget(getSharedGOT(sla));
    return error_code::success();
  };
"
	
	
	
	
      end
    end

    classdiagram 128140 "RelocationPass"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end
  end

  deploymentview 128268 "Cpu0"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 128396 "Cpu0LinkingContext"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 131212 // anonymous1
      end
    end

    artifact 129932 "Cpu0InitAtom"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 138636 // Cpu0InitAtom
      end
    end

    artifact 130060 "Cpu0FiniAtom"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 138892 // Cpu0FiniAtom
      end
    end

    artifact 130188 "Cpu0InitFiniFile"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 139020 // Cpu0InitFiniFile
      end
    end

    artifact 130316 "Cpu0SoPlt"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 139148 // Cpu0SoPlt
      end
    end

    artifact 130444 "Cpu0BootAtom"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 139276 // Cpu0BootAtom
      end
    end

    artifact 130572 "Cpu0GOTAtom"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 139532 // Cpu0GOTAtom
      end
    end

    artifact 130700 "Cpu0PLT0Atom"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 139788 // Cpu0PLT0Atom
      end
    end

    artifact 130828 "Cpu0PLTAtom"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 139916 // Cpu0PLTAtom
      end
    end

    artifact 130956 "ELFPassFile"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 140172 // ELFPassFile
      end
    end

    artifact 131084 "typedef11"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 140428 // typedef11
      end
    end

    artifact 131212 "RelocationPass"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 140300 // RelocationPass
      end
    end

    artifact 131340 "StaticRelocationPass"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 140556 // StaticRelocationPass
      end
    end

    artifact 131468 "DynamicRelocationPass"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 140684 // DynamicRelocationPass
      end
    end
  end
end
