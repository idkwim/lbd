1. Resource:

  lldb
  http://lldb.llvm.org/lldb-gdb.html

  tblgen:
  http://pygments.org/docs/lexerdevelopment/
  https://github.com/azru0512/tblgenlexer

  // MIPS toolchain
  http://developer.mips.com/tools/compilers/open-source-toolchain-linux/

  clang -c main.cpp -emit-llvm -o main.bc


2. llvm command & run:

  llc -debug // Show debug messages
  llc --help-hidden	// Show all help
  llc -mips-fix-global-base-reg=false

  cd llvm-3.1.src/test/ExecutionEngine
  llc -march=mips main.bc -o main.mips.s

  llvm-as hello2.ll -o hello2.bc	// transfer .ll to .bc
  llvm-ld hello2.bc -o hello2	// transfer .bc to executable (elf)
  llc hello2.bc -o hello2.s	// transfer .bc to native machine asm
  clang hello2.s -o hello2	// clang transfer asm to executable
  gcc filename.s -o hello2	// gcc transfer asm to executable

  llvm-config --targets-built	// print support target

  cmake -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DCMAKE_BUILD_TYPE=Debug -G "Xcode" ../src/
  cmake -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DCMAKE_BUILD_TYPE=Release -G "Xcode" ../src/

  // release build
  cd /usr/local/llvm/3.1/configure_release_build
  ../src/configure
  make

  // debug build (can do gdb clang, track clang code in run time)
  cd /usr/local/llvm/3.1/configure_debug_build
  ../src/configure --enable-assertions --disable-optimized --enable-debug-runtime
  cp -rf ../src/tools/clang/examples tools/clang/.	// build with clang examples
  make BUILD_EXAMPLES=1

  // cmake release build with examples on
  // http://llvm.org/docs/CMake.html
  cd /usr/local/llvm/3.1/cmake_release_build
  cmake -DCMAKE_CXX_COMPILER=/usr/local/llvm/3.1/configure_release_build/Release+Asserts/bin/clang++ -DCMAKE_C_COMPILER=/usr/local/llvm/3.1/configure_release_build/Release+Asserts/bin/clang -DCMAKE_BUILD_TYPE=Release -DCLANG_BUILD_EXAMPLES=ON -DLLVM_BUILD_EXAMPLES=ON -G "Unix Makefiles" ../src/
  make

  // cmake debug build with examples on
  // http://llvm.org/docs/CMake.html
  cd /usr/local/llvm/3.1/cmake_debug_build
  cmake -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DCMAKE_BUILD_TYPE=Debug -DCLANG_BUILD_EXAMPLES=ON -DLLVM_BUILD_EXAMPLES=ON -G "Unix Makefiles" ../src/
  make

  // Debug llvm_test/CommandLine/main.cpp
  cd Gamma_flash/llvm_test/CommandLine
  make	// CXX := g++ in Makefile. If by clang++ it cannot set break point on global variable cl::opt (line 47)

  // lldb debug
  /Applications/Xcode.app/Contents/Developer/usr/bin/lldb -- /Users/Jonathan/llvm/3.1.test/cpu0/1/cmake_debug_build/bin/Debug/llc -march=cpu0 -filetype=asm ch3_3.bc -o ch3_3.cpu0.s 

  b Cpu0ISelDAGToDAG.cpp:116


3. Unix command:

  // Replace "Mips" with "Fpga" in currently directory of all files.
  cd Fpga
  find . -type f -print0 | xargs -0 sed -i 's/Mips/Fpga/g'
  find . -type f -print0 | xargs -0 sed -i 's/MIPS/FPGA/g'
  find . -type f -print0 | xargs -0 sed -i 's/mips/fpga/g'

  find . -type f -print0 | xargs -0 sed -i 's/Fpga/Cpu0/g'
  find . -type f -print0 | xargs -0 sed -i 's/FPGA/CPU0/g'
  find . -type f -print0 | xargs -0 sed -i 's/fpga/cpu0/g'

  /*-print0 (GNU find only) tells find to use the null character (\0) instead of whitespace as the output delimiter between pathnames found. This is a safer option if you files can contain blanks or other special character. It is recommended to use the -print0 argument to find if you use -exec command or xargs (the -0 argument is needed in xargs.).*/

  rename Mips Fpga * AsmParser/* Disassembler/* InstPrinter/* MCTargetDesc/* TargetInfo/*

  rename Fpga Cpu0 * AsmParser/* Disassembler/* InstPrinter/* MCTargetDesc/* TargetInfo/*

rm -f `find . -name *.cpp~`

