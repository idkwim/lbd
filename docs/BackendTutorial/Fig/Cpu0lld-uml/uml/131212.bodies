class Cpu0LinkingContext
!!!149260.cpp!!!	addPasses(inout pm : PassManager) : void
  switch (_outputFileType) {
  case llvm::ELF::ET_EXEC:
    if (_isStaticExecutable)
      pm.add(std::unique_ptr<Pass>(new StaticGOTPLTPass(*this, true)));
#ifdef DYNLINKER
    else
      pm.add(std::unique_ptr<Pass>(new DynamicGOTPLTPass(*this, true)));
    break;
  case llvm::ELF::ET_DYN:
    pm.add(std::unique_ptr<Pass>(new DynamicGOTPLTPass(*this, false)));
#endif // DYNLINKER
    break;
  case llvm::ELF::ET_REL:
    break;
  default:
    llvm_unreachable("Unhandled output file type");
  }
  ELFLinkingContext::addPasses(pm);
!!!149900.cpp!!!	relocKindFromString(in str : StringRef) : ErrorOr<Reference::Kind>
  int32_t ret = llvm::StringSwitch<int32_t>(str)
  LLD_CASE(R_CPU0_NONE)
  LLD_CASE(R_CPU0_24)
  LLD_CASE(R_CPU0_32)
  LLD_CASE(R_CPU0_HI16)
  LLD_CASE(R_CPU0_LO16)
  LLD_CASE(R_CPU0_GPREL16)
  LLD_CASE(R_CPU0_LITERAL)
  LLD_CASE(R_CPU0_GOT16)
  LLD_CASE(R_CPU0_PC24)
  LLD_CASE(R_CPU0_CALL16)
    .Case("LLD_R_CPU0_GOTRELINDEX", LLD_R_CPU0_GOTRELINDEX)
    .Default(-1);

  if (ret == -1)
    return make_error_code(yaml_reader_error::illegal_value);
  return ret;
!!!150028.cpp!!!	stringFromRelocKind(in kind : Reference::Kind) : ErrorOr<std::string>
  switch (kind) {
  LLD_CASE(R_CPU0_NONE)
  LLD_CASE(R_CPU0_24)
  LLD_CASE(R_CPU0_32)
  LLD_CASE(R_CPU0_HI16)
  LLD_CASE(R_CPU0_LO16)
  LLD_CASE(R_CPU0_GPREL16)
  LLD_CASE(R_CPU0_LITERAL)
  LLD_CASE(R_CPU0_GOT16)
  LLD_CASE(R_CPU0_PC24)
  LLD_CASE(R_CPU0_CALL16)
  case LLD_R_CPU0_GOTRELINDEX:
    return std::string("LLD_R_CPU0_GOTRELINDEX");
  }

  return make_error_code(yaml_reader_error::illegal_value);
