class ELFLinkingContext
!!!152716.cpp!!!	isLittleEndian() : bool
  // TODO: Do this properly. It is not defined purely by arch.
  return true;
!!!153228.cpp!!!	getOutputMachine() : uint16_t
  switch (getTriple().getArch()) {
  case llvm::Triple::x86:
    return llvm::ELF::EM_386;
  case llvm::Triple::x86_64:
    return llvm::ELF::EM_X86_64;
  case llvm::Triple::hexagon:
    return llvm::ELF::EM_HEXAGON;
  case llvm::Triple::ppc:
    return llvm::ELF::EM_PPC;
  case llvm::Triple::cpu0:
    return llvm::ELF::EM_CPU0;
  default:
    llvm_unreachable("Unhandled arch");
  }
!!!153868.cpp!!!	validateImpl(inout diagnostics : raw_ostream) : bool
  if (_outputFileType == elf::ET_EXEC && _entrySymbolName.empty()) {
    _entrySymbolName = "_start";
  }

  if (_inputFiles.empty()) {
    diagnostics << "No input files\n";
    return true;
  }

  _elfReader = createReaderELF(*this);
  _linkerScriptReader.reset(new ReaderLinkerScript(*this));
  _writer = _outputYAML ? createWriterYAML(*this) : createWriterELF(*this);
  return false;
!!!154252.cpp!!!	create(in triple : llvm::Triple) : std::unique_ptr<ELFLinkingContext>
  switch (triple.getArch()) {
  case llvm::Triple::x86:
    return std::unique_ptr<ELFLinkingContext>(
        new lld::elf::X86LinkingContext(triple));
  case llvm::Triple::x86_64:
    return std::unique_ptr<ELFLinkingContext>(
        new lld::elf::X86_64LinkingContext(triple));
  case llvm::Triple::hexagon:
    return std::unique_ptr<ELFLinkingContext>(
        new lld::elf::HexagonLinkingContext(triple));
  case llvm::Triple::ppc:
    return std::unique_ptr<ELFLinkingContext>(
        new lld::elf::PPCLinkingContext(triple));
  case llvm::Triple::cpu0:
    return std::unique_ptr<ELFLinkingContext>(
        new lld::elf::Cpu0LinkingContext(triple));
  default:
    return nullptr;
  }
!!!154764.cpp!!!	isDynamic() : bool
  switch (_outputFileType) {
  case llvm::ELF::ET_EXEC:
    return !_isStaticExecutable;
  case llvm::ELF::ET_DYN:
    return true;
  }
  return false;
!!!154892.cpp!!!	isRelativeReloc(in r : Reference) : bool
  return false;
!!!155148.cpp!!!	addPasses(inout pm : PassManager) : void
  if (_runLayoutPass)
    pm.add(std::unique_ptr<Pass>(new LayoutPass()));
!!!158348.cpp!!!	writer() : Writer
 return *_writer;
