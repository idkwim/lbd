diff -Naur Chapter11_1/Cpu0InstrInfo.td Chapter11_2/Cpu0InstrInfo.td
--- Chapter11_1/Cpu0InstrInfo.td	2013-09-30 13:02:21.385928383 +0800
+++ Chapter11_2/Cpu0InstrInfo.td	2013-09-30 13:02:21.393928383 +0800
@@ -496,6 +496,7 @@
 
 def RET     : RetBase<CPURegs>;
 
+def IRET    : JumpFR<0x3d, "iret", CPURegs>;
 def JALR    : JumpLinkReg<0x3e, "jalr", CPURegs>;
 
 /// Multiply and Divide Instructions.
diff -Naur Chapter11_1/MCTargetDesc/Cpu0MCCodeEmitter.cpp Chapter11_2/MCTargetDesc/Cpu0MCCodeEmitter.cpp
--- Chapter11_1/MCTargetDesc/Cpu0MCCodeEmitter.cpp	2013-09-30 13:02:21.385928383 +0800
+++ Chapter11_2/MCTargetDesc/Cpu0MCCodeEmitter.cpp	2013-09-30 13:02:21.393928383 +0800
@@ -163,19 +163,29 @@
 }
 
 /// getJumpTargetOpValue - Return binary encoding of the jump
-/// target operand. Such as SWI and JSUB.
+/// target operand. Such as SWI and JSUB. 
+/// If the machine operand requires relocation,
+/// record the relocation and return zero.
 unsigned Cpu0MCCodeEmitter::
 getJumpTargetOpValue(const MCInst &MI, unsigned OpNo,
                      SmallVectorImpl<MCFixup> &Fixups) const {
 
+  unsigned Opcode = MI.getOpcode();
   const MCOperand &MO = MI.getOperand(OpNo);
   // If the destination is an immediate, we have nothing to do.
   if (MO.isImm()) return MO.getImm();
   assert(MO.isExpr() && "getJumpTargetOpValue expects only expressions");
 
   const MCExpr *Expr = MO.getExpr();
-  Fixups.push_back(MCFixup::Create(0, Expr,
-                                   MCFixupKind(Cpu0::fixup_Cpu0_24)));
+  if (Opcode == Cpu0::JSUB)
+    Fixups.push_back(MCFixup::Create(0, Expr,
+                                     MCFixupKind(Cpu0::fixup_Cpu0_PC24)));
+  else if (Opcode == Cpu0::SWI)
+    Fixups.push_back(MCFixup::Create(0, Expr,
+                                     MCFixupKind(Cpu0::fixup_Cpu0_24)));
+  else
+    llvm_unreachable("unexpect opcode in getJumpAbsoluteTargetOpValue()");
+  
   return 0;
 }
 
