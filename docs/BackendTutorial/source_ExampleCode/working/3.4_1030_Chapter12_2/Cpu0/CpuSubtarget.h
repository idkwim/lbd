//===-- CpuSubtarget.h - Define Subtarget for the Cpu ---------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the Cpu specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef CPUSUBTARGET_H
#define CPUSUBTARGET_H

#include "llvm/Target/TargetSubtargetInfo.h"
#include "llvm/MC/MCInstrItineraries.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "CpuGenSubtargetInfo.inc"

extern bool CpuNoCpload;

namespace llvm {
class StringRef;

class CpuSubtarget : public CpuGenSubtargetInfo {
  virtual void anchor();

public:
  // NOTE: O64 will not be supported.
  enum CpuABIEnum {
    UnknownABI, O32
  };

protected:
  enum CpuArchEnum {
    Cpu32
  };

  // Cpu architecture version
  CpuArchEnum CpuArchVersion;

  // Cpu supported ABIs
  CpuABIEnum CpuABI;

  // IsLittle - The target is Little Endian
  bool IsLittle;

  // UseSmallSection - Small section is used.
  bool UseSmallSection;

  InstrItineraryData InstrItins;

  // Relocation Model
  Reloc::Model RM;

public:
  unsigned getTargetABI() const { return CpuABI; }

  /// This constructor initializes the data members to match that
  /// of the specified triple.
  CpuSubtarget(const std::string &TT, const std::string &CPU,
                const std::string &FS, bool little, Reloc::Model _RM);

//- Vitual function, must have
  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  bool isLittle() const { return IsLittle; }
  bool useSmallSection() const { return UseSmallSection; }
};
} // End llvm namespace

#endif
